Traceback (most recent call last):
  File "/Users/knf792/miniconda3/envs/nlp-course/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/Users/knf792/miniconda3/envs/nlp-course/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/knf792/miniconda3/envs/nlp-course/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/knf792/miniconda3/envs/nlp-course/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/Users/knf792/miniconda3/envs/nlp-course/lib/python3.10/asyncio/base_events.py", line 646, in run_until_complete
    return future.result()
  File "/Users/knf792/miniconda3/envs/nlp-course/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/Users/knf792/miniconda3/envs/nlp-course/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/knf792/miniconda3/envs/nlp-course/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
def sanity_check(lm, *history):
    """Throws an AssertionError if lm does not define a valid probability distribution for all words 
    in the vocabulary."""  
    probability_mass = sum([lm.probability(word, *history) for word in lm.vocab])
    assert abs(probability_mass - 1.0) < 1e-6, probability_mass

unigram = NGramLM(oov_train,1)
stupid = StupidBackoff(bigram, unigram, 0.1)
print(sum([stupid.probability(word, 'the') for word in stupid.vocab]))
assert OOV in stupid.vocab
sanity_check(stupid, 'the')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mAssertionError[0m                            Traceback (most recent call last)
Input [0;32mIn [4][0m, in [0;36m<cell line: 11>[0;34m()[0m
[1;32m      9[0m [38;5;28mprint[39m([38;5;28msum[39m([stupid[38;5;241m.[39mprobability(word, [38;5;124m'[39m[38;5;124mthe[39m[38;5;124m'[39m) [38;5;28;01mfor[39;00m word [38;5;129;01min[39;00m stupid[38;5;241m.[39mvocab]))
[1;32m     10[0m [38;5;28;01massert[39;00m OOV [38;5;129;01min[39;00m stupid[38;5;241m.[39mvocab
[0;32m---> 11[0m [43msanity_check[49m[43m([49m[43mstupid[49m[43m,[49m[43m [49m[38;5;124;43m'[39;49m[38;5;124;43mthe[39;49m[38;5;124;43m'[39;49m[43m)[49m

Input [0;32mIn [4][0m, in [0;36msanity_check[0;34m(lm, *history)[0m
[1;32m      2[0m [38;5;124;03m"""Throws an AssertionError if lm does not define a valid probability distribution for all words [39;00m
[1;32m      3[0m [38;5;124;03min the vocabulary."""[39;00m  
[1;32m      4[0m probability_mass [38;5;241m=[39m [38;5;28msum[39m([lm[38;5;241m.[39mprobability(word, [38;5;241m*[39mhistory) [38;5;28;01mfor[39;00m word [38;5;129;01min[39;00m lm[38;5;241m.[39mvocab])
[0;32m----> 5[0m [38;5;28;01massert[39;00m [38;5;28mabs[39m(probability_mass [38;5;241m-[39m [38;5;241m1.0[39m) [38;5;241m<[39m [38;5;241m1e-6[39m, probability_mass

[0;31mAssertionError[0m: 1.0661659877800416
AssertionError: 1.0661659877800416

